input { 
  file {
    exit_after_read => true
    mode => "read"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    file_completed_action => "log"
    file_completed_log_path => "/dev/null"
    file_chunk_size => 131072
    path => "${EXPORT_PATH}/*.jsonl"
    codec => json {
      ecs_compatibility => "disabled"
    }
  }
}

filter {
  # Remove Logstash fields and add timeline identifiers
  mutate {
    remove_field => ["[event][original]", "[log][file][path]", "@timestamp", "@version", "[host][name]"]
    remove_field => ["[event]", "[log]", "[host]"]
    add_field => { "__ts_timeline_filter_id" => "${TIMELINE_FILTER_ID}" }
    add_field => { "__ts_timeline_id" => "${TIMELINE_ID}" }
  }

  # Convert value 
  mutate {
    convert => {"__ts_timeline_id" => "integer"}
  }

  ################################################################################
  # Dissect records + Timesketch fields
  ################################################################################

  # Drop recorddescriptor records
  if [_type] and [_data] {
    drop {}
  }

  # Remove fields used by Timesketch
  # Record windows/registry/regf/value uses data_type
  # Record filesystem/windows/evtx uses Timestamp
  mutate {
    rename => { "[data_type]" => "value_data_type" }
    remove_field => ["Timestamp", "timestamp", "datetime", "timestamp_desc"]
  }
  
  if [digests] {
    mutate {
      rename => { "[digests][md5]" => "md5" }
      rename => { "[digests][sha1]" => "sha1" }
      rename => { "[digests][sha256]" => "sha256" }
      remove_field => ["[digests]"]
    }
  }

  # If ts enrich fields, otherwise set datetime to zero for non datetime records
  if [ts] {
    mutate {
      rename => { "ts" => "datetime" } 
      rename => { "ts_description" => "timestamp_desc" }
    }
    date {
      match => ["datetime", "ISO8601"]
      target => "timestamp"
    }

    # Epoch timestamp in microseconds
    ruby { code => "event.set('timestamp', (event.get('timestamp').to_i) * 1000)" }
  } 
  else {
    mutate {
      remove_field => ["[ts]"]
      remove_field => ["[ts_description]"]
      add_field => { "datetime" => "1970-01-01T00:00:00" }
      add_field => { "timestamp" => 0 }
      add_field => { "timestamp_desc" => "" }
    }
  }

  # Use Dissect record name as data_type
  mutate {
    replace => {"data_type" => "%{[_recorddescriptor][0]}"}
  }

  # Lowercase only supports top level fields https://github.com/elastic/logstash/issues/2526
  ruby {
    code => "
      event.to_hash.keys.each do |k|
        event.set(k.downcase, event.remove(k))
      end
    "
  }

  # Enrich message field with all fields of Dissect record
  # Hardcoded dynamic records
  if [data_type] == "filesystem/windows/evtx" {
    mutate { add_field => { "message" => "Provider_Name: %{provider_name}, EventID: %{eventid}" } }
  }
  else if [data_type] == "filesystem/windows/task" {
    mutate { add_field => { "message" => "Uri: %{uri}" } }
  }
  else if [data_type] == "filesystem/windows/task/grouped" {
    mutate { add_field => { "message" => "Uri: %{uri}" } }
  }
  else if [data_type] == "filesystem/windows/amcache/install" {
    mutate { add_field => { "message" => "FileName: %{filename} Path: %{Path}" } }
  }
  else if [data_type] == "filesystem/windows/wer/report" {
    mutate { add_field => { "message" => "App_Name: %{app_name} Event_Type: %{event_type}" } }
  }
  else if [data_type] == "windows/registry/firewall" {
    mutate { add_field => { "message" => "Key: %{key} Action: %{actiono} Active: %{active} Dir: %{dir} Protocol: %{protocol}" } }
  }
  else if [data_type] == "filesystem/windows/etl" {
    mutate { add_field => { "message" => "ProviderName: %{providername} %{eventtype}" } }
  }
  else if [data_type] == "generic/osinfo/grouped" {
    mutate { add_field => { "message" => "Name: %{name} Value: %{value}" } }
  }
  else if [data_type] == "unix/user" {
    mutate { add_field => { "message" => "Name: %{name} Home: %{Home} Shell: %{shell}" } }
  }
  else if [data_type] == "target/child" {
    mutate { add_field => { "message" => "Type: %{type} Path: %{path}" } }
  }
  else if [data_type] == "windows/user" {
    mutate { add_field => { "message" => "%{sid} Name:%{name}" } }
  }
  # End hardcoded (dynamic) records
  else if [data_type] == "filesystem/entry" {
    mutate { add_field => { "message" => "Path: %{path}" } }
  }
  else if [data_type] == "filesystem/acquire_open_handles" {
    mutate { add_field => { "message" => "Name: %{name} Handle_type: %{handle_type} Object: %{object}" } }
  }
  else if [data_type] == "filesystem/acquire_hash" {
    mutate { add_field => { "message" => "Path: %{path}" } }
  }
  else if [data_type] == "filesystem/yara/match" {
    mutate { add_field => { "message" => "Path: %{path} Rule: %{rule} Tags: %{tags}" } }
  }
  else if [data_type] == "filesystem/unix/capability" {
    mutate { add_field => { "message" => "Record: %{record} Permitted: %{permitted} Inheritable: %{inheritable} Effective: %{effective} Rootid: %{rootid}" } }
  }
  else if [data_type] == "filesystem/unix/suid" {
    mutate { add_field => { "message" => "Path: %{path}" } }
  }
  else if [data_type] == "filesystem/ntfs/usnjrnl" {
    mutate { add_field => { "message" => "Path: %{path} Reason: %{reason} Attr: %{attr}" } }
  }
  else if [data_type] == "filesystem/ntfs/mft/filename/compact" {
    mutate { add_field => { "message" => "Path: %{path}" } }
  }
  else if [data_type] == "filesystem/ntfs/mft/filename" {
    mutate { add_field => { "message" => "Ts_type: %{ts_type} Path: %{path}" } }
  }
  else if [data_type] == "filesystem/ntfs/mft/std" {
    mutate { add_field => { "message" => "Ts_type: %{ts_type} Path: %{path}" } }
  }
  else if [data_type] == "filesystem/ntfs/mft/std/compact" {
    mutate { add_field => { "message" => "Path: %{path}" } }
  }
  else if [data_type] == "generic/osinfo" {
    mutate { add_field => { "message" => "Name: %{name} Value: %{value}" } }
  }
  else if [data_type] == "example/descriptor" {
    mutate { add_field => { "message" => "Field_a: %{field_a}" } }
  }
  else if [data_type] == "example/registry/user" {
    mutate { add_field => { "message" => "Ts: %{ts}" } }
  }
  else if [data_type] == "browser/firefox/history" {
    mutate { add_field => { "message" => "Browser: %{browser} Title: %{title} Url: %{url}" } }
  }
  else if [data_type] == "browser/firefox/download" {
    mutate { add_field => { "message" => "Browser: %{browser} Path: %{path} Url: %{url}" } }
  }
  else if [data_type] == "browser/chromium/download" {
    mutate { add_field => { "message" => "Browser: %{browser} Path: %{path} Url: %{url}" } }
  }
  else if [data_type] == "browser/chromium/history" {
    mutate { add_field => { "message" => "Browser: %{browser} Title: %{title} Url: %{url}" } }
  }
  else if [data_type] == "browser/chromium/extension" {
    mutate { add_field => { "message" => "Browser: %{browser} Name: %{name}" } }
  }
  else if [data_type] == "browser/edge/history" {
    mutate { add_field => { "message" => "Browser: %{browser} Title: %{title} Url: %{url}" } }
  }
  else if [data_type] == "browser/edge/download" {
    mutate { add_field => { "message" => "Browser: %{browser} Path: %{path} Url: %{url}" } }
  }
  else if [data_type] == "browser/edge/extension" {
    mutate { add_field => { "message" => "Browser: %{browser} Name: %{name}" } }
  }
  else if [data_type] == "browser/ie/history" {
    mutate { add_field => { "message" => "Browser: %{browser} Title: %{title} Url: %{url}" } }
  }
  else if [data_type] == "browser/ie/download" {
    mutate { add_field => { "message" => "Browser: %{browser} Path: %{path} Url: %{url}" } }
  }
  else if [data_type] == "browser/chromium/extension" {
    mutate { add_field => { "message" => "Browser: %{browser} Name: %{name}" } }
  }
  else if [data_type] == "browser/chrome/extension" {
    mutate { add_field => { "message" => "Browser: %{browser} Name: %{name}" } }
  }
  else if [data_type] == "browser/chrome/history" {
    mutate { add_field => { "message" => "Browser: %{browser} Title: %{title} Url: %{url}" } }
  }
  else if [data_type] == "browser/chrome/download" {
    mutate { add_field => { "message" => "Browser: %{browser} Path: %{path} Url: %{url}" } }
  }
  else if [data_type] == "linux/service" {
    mutate { add_field => { "message" => "Name: %{name} Source: %{source}" } }
  }
  else if [data_type] == "linux/environmentvariable" {
    mutate { add_field => { "message" => "Key: %{key} Value: %{value} Source: %{source}" } }
  }
  else if [data_type] == "linux/cronjob" {
    mutate { add_field => { "message" => "Command: %{command}" } }
  }
  else if [data_type] == "linux/log/packagemanager" {
    mutate { add_field => { "message" => "Package_manager: %{package_manager} Operation: %{operation} Package_name: %{package_name} Command: %{command} Requested_by_user: %{requested_by_user}" } }
  }
  else if [data_type] == "linux/keyboard" {
    mutate { add_field => { "message" => "Layout: %{layout} Model: %{model} Variant: %{variant} Options: %{options} Backspace: %{backspace}" } }
  }
  else if [data_type] == "linux/shadow" {
    mutate { add_field => { "message" => "Name: %{name}" } }
  }
  else if [data_type] == "linux/history" {
    mutate { add_field => { "message" => "Command: %{command} Source: %{source}" } }
  }
  else if [data_type] == "osx/account_policy" {
    mutate { add_field => { "message" => "Username: %{username} Failed_login_count: %{failed_login_count}" } }
  }
  else if [data_type] == "linux/iptables/save" {
    mutate { add_field => { "message" => "Type: %{type} Table: %{table} Chain: %{chain} Program: %{program} Rule: %{rule}" } }
  }
  else if [data_type] == "linux/debian/dpkg/package/log" {
    mutate { add_field => { "message" => "Name: %{name} Operation: %{operation} Status: %{status} Version_old: %{version_old} Version: %{version}" } }
  }
  else if [data_type] == "linux/debian/dpkg/package/status" {
    mutate { add_field => { "message" => "Name: %{name} Status: %{status} Priority: %{priority} Section: %{section} Version: %{version}" } }
  }
  else if [data_type] == "linux/log/packagemanager" {
    mutate { add_field => { "message" => "Package_manager: %{package_manager} Operation: %{operation} Package_name: %{package_name} Command: %{command} Requested_by_user: %{requested_by_user}" } }
  }
  else if [data_type] == "linux/log/packagemanager" {
    mutate { add_field => { "message" => "Package_manager: %{package_manager} Operation: %{operation} Package_name: %{package_name} Command: %{command} Requested_by_user: %{requested_by_user}" } }
  }
  else if [data_type] == "linux/log/packagemanager" {
    mutate { add_field => { "message" => "Package_manager: %{package_manager} Operation: %{operation} Package_name: %{package_name} Command: %{command} Requested_by_user: %{requested_by_user}" } }
  }
  else if [data_type] == "linux/log/auth" {
    mutate { add_field => { "message" => "Message: %{message}" } }
  }
  else if [data_type] == "linux/log/journal" {
    mutate { add_field => { "message" => "Message: %{message} Cmdline: %{cmdline}" } }
  }
  else if [data_type] == "linux/log/audit" {
    mutate { add_field => { "message" => "Message: %{message}" } }
  }
  else if [data_type] == "linux/log/btmp" {
    mutate { add_field => { "message" => "Ut_type: %{ut_type} Ut_user: %{ut_user} Ut_pid: %{ut_pid} Ut_line: %{ut_line} Ut_id: %{ut_id} Ut_host: %{ut_host} Ut_addr: %{ut_addr}" } }
  }
  else if [data_type] == "linux/log/wtmp" {
    mutate { add_field => { "message" => "Ut_type: %{ut_type} Ut_user: %{ut_user} Ut_pid: %{ut_pid} Ut_line: %{ut_line} Ut_id: %{ut_id} Ut_host: %{ut_host} Ut_addr: %{ut_addr}" } }
  }
  else if [data_type] == "linux/log/messages" {
    mutate { add_field => { "message" => "Message: %{message}" } }
  }
  else if [data_type] == "linux/log/atop" {
    mutate { add_field => { "message" => "Process: %{process} Cmdline: %{cmdline}" } }
  }
  else if [data_type] == "linux/log/lastlog" {
    mutate { add_field => { "message" => "Uid: %{uid} Ut_user: %{ut_user} Ut_host: %{ut_host} Ut_tty: %{ut_tty}" } }
  }
  else if [data_type] == "windows/filesystem/recyclebin" {
    mutate { add_field => { "message" => "Path: %{path} Deleted_path: %{deleted_path}" } }
  }
  else if [data_type] == "windows/service" {
    mutate { add_field => { "message" => "Name: %{name} Displayname: %{displayname} Imagepath: %{imagepath} Start: %{start} Type: %{type}" } }
  }
  else if [data_type] == "path_datetime" {
    mutate { add_field => { "message" => "Path: %{path}" } }
  }
  else if [data_type] == "windows/pathext" {
    mutate { add_field => { "message" => "Pathext: %{pathext}" } }
  }
  else if [data_type] == "windows/environment" {
    mutate { add_field => { "message" => "Name: %{name} Value: %{value}" } }
  }
  else if [data_type] == "filesystem/windows/defender/quarantine/file" {
    mutate { add_field => { "message" => "Detection_name: %{detection_name} Detection_path: %{detection_path}" } }
  }
  else if [data_type] == "filesystem/windows/defender/evtx" {
    mutate { add_field => { "message" => "Eventid: %{eventid} Provider_name: %{provider_name} Process_name: %{process_name} Threat_name: %{threat_name}" } }
  }
  else if [data_type] == "filesystem/windows/defender/exclusion" {
    mutate { add_field => { "message" => "Type: %{type} Value: %{value}" } }
  }
  else if [data_type] == "filesystem/windows/defender/quarantine" {
    mutate { add_field => { "message" => "Detection_type: %{detection_type} Detection_name: %{detection_name}" } }
  }
  else if [data_type] == "windows/catroot" {
    mutate { add_field => { "message" => "Hint: %{hint} Source: %{source}" } }
  }
  else if [data_type] == "windows/thumbcache/index" {
    mutate { add_field => { "message" => "Path: %{path}" } }
  }
  else if [data_type] == "windows/thumbcache/thumbcache" {
    mutate { add_field => { "message" => "Path: %{path}" } }
  }
  else if [data_type] == "windows/thumbcache/iconcache" {
    mutate { add_field => { "message" => "Path: %{path}" } }
  }
  else if [data_type] == "windows/syscache/object" {
    mutate { add_field => { "message" => "Program_id: %{program_id} File_id: %{file_id} Path: %{path}" } }
  }
  else if [data_type] == "filesystem/registry/commandprocautorun" {
    mutate { add_field => { "message" => "Path: %{path}" } }
  }
  else if [data_type] == "filesystem/registry/nullsessionpipes" {
    mutate { add_field => { "message" => "Name: %{name}" } }
  }
  else if [data_type] == "filesystem/registry/knowndlls" {
    mutate { add_field => { "message" => "Path: %{path}" } }
  }
  else if [data_type] == "filesystem/registry/filerenameoperations" {
    mutate { add_field => { "message" => "Path: %{path}" } }
  }
  else if [data_type] == "filesystem/registry/sessionmanager" {
    mutate { add_field => { "message" => "Path: %{path}" } }
  }
  else if [data_type] == "filesystem/registry/winsocknamespaceprovider" {
    mutate { add_field => { "message" => "Librarypath: %{librarypath}" } }
  }
  else if [data_type] == "filesystem/registry/appinit" {
    mutate { add_field => { "message" => "Path: %{path}" } }
  }
  else if [data_type] == "filesystem/registry/bootshell" {
    mutate { add_field => { "message" => "Path: %{path}" } }
  }
  else if [data_type] == "filesystem/registry/ndis" {
    mutate { add_field => { "message" => "Network: %{network} Name: %{name}" } }
  }
  else if [data_type] == "filesystem/registry/alternateshell" {
    mutate { add_field => { "message" => "Path: %{path}" } }
  }
  else if [data_type] == "filesystem/registry/winrar" {
    mutate { add_field => { "message" => "Path: %{path}" } }
  }
  else if [data_type] == "windows/activitiescache" {
    mutate { add_field => { "message" => "App_id: %{app_id}" } }
  }
  else if [data_type] == "path_string_datetime" {
    mutate { add_field => { "message" => "String: %{string}" } }
  }
  else if [data_type] == "filesystem/windows/startupinfo" {
    mutate { add_field => { "message" => "Path: %{path} Commandline: %{commandline} Parent_name: %{parent_name}" } }
  }
  else if [data_type] == "windows/keyboard" {
    mutate { add_field => { "message" => "Layout: %{layout} Id: %{id}" } }
  }
  else if [data_type] == "windows/filesystem/lnk" {
    mutate { add_field => { "message" => "Lnk_name: %{lnk_name} Lnk_iconlocation: %{lnk_iconlocation} Lnk_path: %{lnk_path}" } }
  }
  else if [data_type] == "filesystem/windows/ual/system_identity" {
    mutate { add_field => { "message" => "System_dns_hostname: %{system_dns_hostname} System_domain_name: %{system_domain_name} System_manufacturer: %{system_manufacturer} System_product_name: %{system_product_name}" } }
  }
  else if [data_type] == "filesystem/windows/ual/role_access" {
    mutate { add_field => { "message" => "Role_name: %{role_name} Product_name: %{product_name}" } }
  }
  else if [data_type] == "filesystem/windows/ual/virtual_machines" {
    mutate { add_field => { "message" => "Path: %{path}" } }
  }
  else if [data_type] == "filesystem/windows/ual/virtual_machines" {
    mutate { add_field => { "message" => "Path: %{path}" } }
  }
  else if [data_type] == "filesystem/windows/ual/client_access" {
    mutate { add_field => { "message" => "Authenticated_user: %{authenticated_user} Client_name: %{client_name} Address: %{address} Access_count: %{access_count} Total_access_count: %{total_access_count}" } }
  }
  else if [data_type] == "filesystem/ntfs/prefetch" {
    mutate { add_field => { "message" => "Filename: %{filename} Runcount: %{runcount}" } }
  }
  else if [data_type] == "filesystem/ntfs/prefetch" {
    mutate { add_field => { "message" => "Filename: %{filename} Runcount: %{runcount}" } }
  }
  else if [data_type] == "filesystem/windows/cim/consumerbinding" {
    mutate { add_field => { "message" => "Query: %{query}" } }
  }
  else if [data_type] == "windows/notification/wpndatabase" {
    mutate { add_field => { "message" => "Id: %{id}" } }
  }
  else if [data_type] == "windows/notification/wpndatabase/handler" {
    mutate { add_field => { "message" => "Id: %{id} Primary_id: %{primary_id}" } }
  }
  else if [data_type] == "windows/adpolicy" {
    mutate { add_field => { "message" => "Guid: %{guid} Key: %{key} Value: %{value} Path: %{path}" } }
  }
  else if [data_type] == "filesystem/windows/clfs" {
    mutate { add_field => { "message" => "Stream_name: %{stream_name} Stream_id: %{stream_id} Container_name: %{container_name}" } }
  }
  else if [data_type] == "windows/registry/sam" {
    mutate { add_field => { "message" => "Fullname: %{fullname} Username: %{username} Admincomment: %{admincomment}" } }
  }
  else if [data_type] == "windows/appcompat/InventoryApplication" {
    mutate { add_field => { "message" => "Name: %{name} Registry_key_path: %{registry_key_path}" } }
  }
  else if [data_type] == "windows/appcompat/DeviceContainer" {
    mutate { add_field => { "message" => "Manufacturer: %{manufacturer} Model_name: %{model_name}" } }
  }
  else if [data_type] == "windows/appcompat/programs" {
    mutate { add_field => { "message" => "Name: %{name} Publisher: %{publisher} Path: %{path}" } }
  }
  else if [data_type] == "windows/appcompat/InventoryDriverBinary" {
    mutate { add_field => { "message" => "Driver_name: %{driver_name} Product: %{product} Service: %{service}" } }
  }
  else if [data_type] == "windows/appcompat/ApplicationShortcut" {
    mutate { add_field => { "message" => "Path: %{path}" } }
  }
  else if [data_type] == "windows/appcompat/InventoryApplicationFile" {
    mutate { add_field => { "message" => "Name: %{name} Product_name: %{product_name} Path: %{path}" } }
  }
  else if [data_type] == "windows/appcompat/AppLaunch" {
    mutate { add_field => { "message" => "Path: %{path}" } }
  }
  else if [data_type] == "windows/appcompat/file" {
    mutate { add_field => { "message" => "Product_name: %{product_name} Company_name: %{company_name} Path: %{path}" } }
  }
  else if [data_type] == "filesystem/windows/sru/application" {
    mutate { add_field => { "message" => "App: %{app} User: %{user}" } }
  }
  else if [data_type] == "filesystem/windows/sru/energy_estimator" {
    mutate { add_field => { "message" => "App: %{app} User: %{user}" } }
  }
  else if [data_type] == "filesystem/windows/sru/energy_usage" {
    mutate { add_field => { "message" => "App: %{app} User: %{user}" } }
  }
  else if [data_type] == "filesystem/windows/sru/sdp_network_provider" {
    mutate { add_field => { "message" => "App: %{app} User: %{user} Bytes_inbound: %{bytes_inbound} Bytes_outbound: %{bytes_outbound}" } }
  }
  else if [data_type] == "filesystem/windows/sru/sdp_volume_provider" {
    mutate { add_field => { "message" => "App: %{app} User: %{user} Total: %{total} Used: %{used}" } }
  }
  else if [data_type] == "filesystem/windows/sru/sdp_cpu_provider" {
    mutate { add_field => { "message" => "App: %{app} User: %{user} Processor_time: %{processor_time}" } }
  }
  else if [data_type] == "filesystem/windows/sru/sdp_physical_disk_provider" {
    mutate { add_field => { "message" => "App: %{app} User: %{user} Size_in_bytes: %{size_in_bytes}" } }
  }
  else if [data_type] == "filesystem/windows/sru/network_connectivity" {
    mutate { add_field => { "message" => "App: %{app} User: %{user} Connected_time: %{connected_time} Connect_start_time: %{connect_start_time}" } }
  }
  else if [data_type] == "filesystem/windows/sru/push_notification" {
    mutate { add_field => { "message" => "App: %{app} User: %{user}" } }
  }
  else if [data_type] == "filesystem/windows/sru/vfu" {
    mutate { add_field => { "message" => "App: %{app} User: %{user} Start_time: %{start_time} End_time: %{end_time}" } }
  }
  else if [data_type] == "filesystem/windows/sru/application_timeline" {
    mutate { add_field => { "message" => "App: %{app} User: %{user}" } }
  }
  else if [data_type] == "filesystem/windows/sru/energy_usage_lt" {
    mutate { add_field => { "message" => "App: %{app} User: %{user}" } }
  }
  else if [data_type] == "filesystem/windows/sru/network_data" {
    mutate { add_field => { "message" => "App: %{app} User: %{user} Bytes_sent: %{bytes_sent} Bytes_recvd: %{bytes_recvd}" } }
  }
  else if [data_type] == "windows/registry/regf/value" {
    mutate { add_field => { "message" => "Path: %{path} Key: %{key} Name: %{name}" } }
  }
  else if [data_type] == "windows/registry/regf/key" {
    mutate { add_field => { "message" => "Path: %{path} Key: %{key}" } }
  }
  else if [data_type] == "windows/shellbag" {
    mutate { add_field => { "message" => "Path: %{path}" } }
  }
  else if [data_type] == "windows/registry/run" {
    mutate { add_field => { "message" => "Name: %{name} Path: %{path} Key: %{key}" } }
  }
  else if [data_type] == "windows/registry/nethist" {
    mutate { add_field => { "message" => "Profile_name: %{profile_name} Description: %{description} Dns_suffix: %{dns_suffix} First_network: %{first_network}" } }
  }
  else if [data_type] == "windows/registry/bam" {
    mutate { add_field => { "message" => "Path: %{path}" } }
  }
  else if [data_type] == "windows/registry/auditpol" {
    mutate { add_field => { "message" => "Name: %{name} Value: %{value} Category: %{category}" } }
  }
  else if [data_type] == "windows/recentfilecache" {
    mutate { add_field => { "message" => "Path: %{path}" } }
  }
  else if [data_type] == "windows/registry/appxdebug/key" {
    mutate { add_field => { "message" => "Name: %{name} Debug_info: %{debug_info}" } }
  }
  else if [data_type] == "windows/registry/clsid" {
    mutate { add_field => { "message" => "Name: %{name} Value: %{value} Clsid: %{clsid}" } }
  }
  else if [data_type] == "windows/registry/cit/dp" {
    mutate { add_field => { "message" => "Update_key: %{update_key}" } }
  }
  else if [data_type] == "windows/registry/cit/dp/duration" {
    mutate { add_field => { "message" => "Application: %{application} Duration: %{duration}" } }
  }
  else if [data_type] == "windows/registry/cit/system/bitmap/input" {
    mutate { add_field => { "message" => "Aggregation_period_in_s: %{aggregation_period_in_s} Bit_period_in_s: %{bit_period_in_s}" } }
  }
  else if [data_type] == "windows/registry/cit/system/bitmap/unknown" {
    mutate { add_field => { "message" => "Aggregation_period_in_s: %{aggregation_period_in_s} Bit_period_in_s: %{bit_period_in_s}" } }
  }
  else if [data_type] == "windows/registry/cit/system/bitmap/foreground" {
    mutate { add_field => { "message" => "Aggregation_period_in_s: %{aggregation_period_in_s} Bit_period_in_s: %{bit_period_in_s}" } }
  }
  else if [data_type] == "windows/registry/cit/module" {
    mutate { add_field => { "message" => "Tracked_module: %{tracked_module} Executable: %{executable}" } }
  }
  else if [data_type] == "windows/registry/cit/program" {
    mutate { add_field => { "message" => "Path: %{path} Command_line: %{command_line}" } }
  }
  else if [data_type] == "windows/registry/cit/system/bitmap/display_power" {
    mutate { add_field => { "message" => "Aggregation_period_in_s: %{aggregation_period_in_s} Bit_period_in_s: %{bit_period_in_s}" } }
  }
  else if [data_type] == "windows/registry/cit/system/bitmap/nput_touch" {
    mutate { add_field => { "message" => "Aggregation_period_in_s: %{aggregation_period_in_s} Bit_period_in_s: %{bit_period_in_s}" } }
  }
  else if [data_type] == "windows/registry/cit/puu" {
    mutate { add_field => { "message" => "Update_key: %{update_key}" } }
  }
  else if [data_type] == "windows/registry/cit/system/bitmap/display_request_change" {
    mutate { add_field => { "message" => "Aggregation_period_in_s: %{aggregation_period_in_s} Bit_period_in_s: %{bit_period_in_s}" } }
  }
  else if [data_type] == "windows/registry/cit/system" {
    mutate { add_field => { "message" => "Aggregation_period_in_s: %{aggregation_period_in_s}" } }
  }
  else if [data_type] == "windows/registry/cit/telemetry" {
    mutate { add_field => { "message" => "Path: %{path} Version: %{version} Value: %{value}" } }
  }
  else if [data_type] == "windows/registry/mru/recentdocs" {
    mutate { add_field => { "message" => "Value: %{value}" } }
  }
  else if [data_type] == "windows/registry/mru/lastvisited" {
    mutate { add_field => { "message" => "Filename: %{filename} Key: %{key} Path: %{path}" } }
  }
  else if [data_type] == "windows/registry/mru/run" {
    mutate { add_field => { "message" => "Value: %{value}" } }
  }
  else if [data_type] == "windows/registry/mru/msoffice" {
    mutate { add_field => { "message" => "Value: %{value}" } }
  }
  else if [data_type] == "windows/registry/mru/opensave" {
    mutate { add_field => { "message" => "Value: %{value}" } }
  }
  else if [data_type] == "windows/registry/mru/mstsc" {
    mutate { add_field => { "message" => "Value: %{value}" } }
  }
  else if [data_type] == "windows/registry/mru/mapnetworkdrive" {
    mutate { add_field => { "message" => "Value: %{value}" } }
  }
  else if [data_type] == "windows/registry/mru/acmru" {
    mutate { add_field => { "message" => "Value: %{value}" } }
  }
  else if [data_type] == "windows/registry/sevenzip/archistory" {
    mutate { add_field => { "message" => "Path: %{path}" } }
  }
  else if [data_type] == "windows/registry/sevenzip/copyhistory" {
    mutate { add_field => { "message" => "Path: %{path}" } }
  }
  else if [data_type] == "windows/registry/sevenzip/folderhistory" {
    mutate { add_field => { "message" => "Path: %{path}" } }
  }
  else if [data_type] == "windows/registry/sevenzip/pathhistory" {
    mutate { add_field => { "message" => "Path: %{path}" } }
  }
  else if [data_type] == "windows/registry/sevenzip/panelpath" {
    mutate { add_field => { "message" => "Path: %{path}" } }
  }
  else if [data_type] == "windows/registry/muicache" {
    mutate { add_field => { "message" => "Value: %{value} Name: %{name} Path: %{path}" } }
  }
  else if [data_type] == "windows/registry/trusteddocuments" {
    mutate { add_field => { "message" => "Application: %{application} Type: %{type} Document_path: %{document_path}" } }
  }
  else if [data_type] == "windows/registry/userassist" {
    mutate { add_field => { "message" => "Path: %{path} Number_of_executions: %{number_of_executions}" } }
  }
  else if [data_type] == "windows/shimcache" {
    mutate { add_field => { "message" => "Path: %{path} Index: %{index}" } }
  }
  else if [data_type] == "windows/registry/usb" {
    mutate { add_field => { "message" => "Friendlyname: %{friendlyname}" } }
  }
  else if [data_type] == "filesystem/windows/evt" {
    mutate { add_field => { "message" => "Eventid: %{eventid} Sourcename: %{sourcename}" } }
  }
  else if [data_type] == "filesystem/windows/pfro" {
    mutate { add_field => { "message" => "Operation: %{operation} Path: %{path}" } }
  }
  else if [data_type] == "filesystem/windows/amcache/install/arp_create" {
    mutate { add_field => { "message" => "Path: %{path}" } }
  }
  else if [data_type] == "filesystem/windows/amcache/install/file_create" {
    mutate { add_field => { "message" => "Path: %{path}" } }
  }
  else if [data_type] == "application/av/mcafee/msc/log" {
    mutate { add_field => { "message" => "Threat: %{threat} Message: %{message} Keywords: %{keywords}" } }
  }
  else if [data_type] == "application/av/trendmicro/wf/log" {
    mutate { add_field => { "message" => "Threat: %{threat} Path: %{path}" } }
  }
  else if [data_type] == "application/av/trendmicro/wf/firewall" {
    mutate { add_field => { "message" => "Local_ip: %{local_ip} Remote_ip: %{remote_ip} Direction: %{direction} Port: %{port} Path: %{path} Description: %{description}" } }
  }
  else if [data_type] == "application/av/sophos/hitman/log" {
    mutate { add_field => { "message" => "Alert: %{alert} Description: %{description} Details: %{details}" } }
  }
  else if [data_type] == "application/av/sophos/home/log" {
    mutate { add_field => { "message" => "Description: %{description} Path: %{path}" } }
  }
  else if [data_type] == "application/vpn/wireguard/peer" {
    mutate { add_field => { "message" => "Name: %{name}" } }
  }
  else if [data_type] == "application/vpn/wireguard/interface" {
    mutate { add_field => { "message" => "Name: %{name}" } }
  }
  else if [data_type] == "application/vpn/openvpn/server" {
    mutate { add_field => { "message" => "Name: %{name}" } }
  }
  else if [data_type] == "application/vpn/openvpn/client" {
    mutate { add_field => { "message" => "Name: %{name}" } }
  }
  else if [data_type] == "powershell/history" {
    mutate { add_field => { "message" => "Command: %{command} Source: %{source}" } }
  }
  else if [data_type] == "application/log/remoteaccess" {
    mutate { add_field => { "message" => "Tool: %{tool} Description: %{description}" } }
  }
  else if [data_type] == "application/log/remoteaccess" {
    mutate { add_field => { "message" => "Tool: %{tool} Description: %{description}" } }
  }
  else if [data_type] == "application/openssh/authorized_keys" {
    mutate { add_field => { "message" => "Key_type: %{key_type} Public_key: %{public_key} Comment: %{comment} Options: %{options} Path: %{path}" } }
  }
  else if [data_type] == "application/openssh/public_key" {
    mutate { add_field => { "message" => "Key_type: %{key_type} Public_key: %{public_key} Comment: %{comment}" } }
  }
  else if [data_type] == "application/openssh/known_host" {
    mutate { add_field => { "message" => "Hostname_pattern: %{hostname_pattern} Key_type: %{key_type} Public_key: %{public_key} Comment: %{comment} Marker: %{marker} Path: %{path}" } }
  }
  else if [data_type] == "application/openssh/private_key" {
    mutate { add_field => { "message" => "Key_format: %{key_format} Key_type: %{key_type} Public_key: %{public_key} Comment: %{comment} Encrypted: %{encrypted}" } }
  }
  else if [data_type] == "application/log/webserver" {
    mutate { add_field => { "message" => "Method: %{method} Uri: %{uri} Protocol: %{protocol} Status_code: %{status_code} Bytes_sent: %{bytes_sent} Remote_ip: %{remote_ip} Useragent: %{useragent} Referer: %{referer}" } }
  }
  else if [data_type] == "application/log/webserver" {
    mutate { add_field => { "message" => "Method: %{method} Uri: %{uri} Protocol: %{protocol} Status_code: %{status_code} Bytes_sent: %{bytes_sent} Remote_ip: %{remote_ip} Useragent: %{useragent} Referer: %{referer}" } }
  }
  else if [data_type] == "filesystem/windows/iis/logs" {
    mutate { add_field => { "message" => "Client_ip: %{client_ip} Server_ip: %{server_ip} Site_name: %{site_name} Request_method: %{request_method} Request_path: %{request_path} Request_query: %{request_query} Request_size_bytes: %{request_size_bytes} Response_size_bytes: %{response_size_bytes} Service_status_code: %{service_status_code} Win32_status_code: %{win32_status_code}" } }
  }
  else if [data_type] == "application/log/webserver" {
    mutate { add_field => { "message" => "Method: %{method} Uri: %{uri} Protocol: %{protocol} Status_code: %{status_code} Bytes_sent: %{bytes_sent} Remote_ip: %{remote_ip} Useragent: %{useragent} Referer: %{referer}" } }
  }
  else if [data_type] == "application/log/webserver" {
    mutate { add_field => { "message" => "Method: %{method} Uri: %{uri} Protocol: %{protocol} Status_code: %{status_code} Bytes_sent: %{bytes_sent} Remote_ip: %{remote_ip} Useragent: %{useragent} Referer: %{referer}" } }
  }
  else if [data_type] == "application/log/webserver" {
    mutate { add_field => { "message" => "Method: %{method} Uri: %{uri} Protocol: %{protocol} Status_code: %{status_code} Bytes_sent: %{bytes_sent} Remote_ip: %{remote_ip} Useragent: %{useragent} Referer: %{referer}" } }
  }
  else if [data_type] == "apps/containers/docker/container" {
    mutate { add_field => { "message" => "Container_id: %{container_id} Image: %{image} Command: %{command}" } }
  }
  else if [data_type] == "apps/containers/docker/image" {
    mutate { add_field => { "message" => "Name: %{name} Tag: %{tag}" } }
  }
  else if [data_type] == "application/log/cpanel/lastlogin" {
    mutate { add_field => { "message" => "User: %{user} Remote_ip: %{remote_ip}" } }
  }
  # In case a record is not found
  else {
    mutate { add_field => { "message" => "Record is not mapped!" } }
  }

  # Remove Dissect metadata fields
  mutate {
    gsub => ["data_type", "/", ":"] 
    remove_field => ["_classification", "_generated", "_version", "_type", "_recorddescriptor", "_source"]
  }
}

output {
  elasticsearch {
    action => "index"
    hosts => "${ELASTIC_HOST}"
    http_compression => true
    ssl => true
    index => "${INDEX_NAME}"
    manage_template => false 
    user => "logstash"
    password => "${LOGSTASH_PASSWORD}" 
    ecs_compatibility => "disabled"
    data_stream => "false"
  }
}
